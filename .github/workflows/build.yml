name: build
# adapted from -> https://github.com/matusnovak/cpp-vcpkg-template
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Windows x64'
            os: windows-latest
            #triplet: x64-windows-static  <-- does not work :-(
            triplet: x64-windows
            vcpkg_dir: 'C:/vcpkg'
            suffix: 'windows-win64'
            generator: 'Visual Studio 17 2022'
            arch: '-A x64'
          #- name: 'Windows x86'
          #  os: windows-latest
          #  triplet: x86-windows
          #  vcpkg_dir: 'C:/vcpkg'
          #  suffix: 'windows-win32'
          #  generator: 'Visual Studio 17 2022'
          #  arch: '-A Win32'
          - name: 'Linux x64'
            os: ubuntu-22.04
            triplet: x64-linux
            suffix: 'linux-x86_64'
            vcpkg_dir: '/usr/local/share/vcpkg'
            generator: 'Unix Makefiles'
            arch: ''
          #- name: 'Mac OSX x64'
          #  os: macos-latest
          #  triplet: x64-osx
          #  suffix: 'osx-x86_64'
          #  vcpkg_dir: '/usr/local/share/vcpkg'
          #  generator: 'Unix Makefiles'
          #  arch: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: '${{ matrix.vcpkg_dir }}/installed'
          key: vcpkg-${{ matrix.triplet }}-${{ hashFiles('vcpkg.txt') }}
          restore-keys: |
            vcpkg-${{ matrix.triplet }}-

      - name: Install dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ] || [ "$RUNNER_OS" == "macOS" ]; then
            # on Windows and macOS, we use vcpkg in order to pull in our dependencies,
            #  note also that the list of packages comes from the file "vcpkg.txt" in the repo
            vcpkg install --triplet ${{ matrix.triplet }} $(cat vcpkg.txt) --recurse
          else
            if [ "$RUNNER_OS" == "Linux" ]; then
              # on Linux, we can simply rely on apt
              # sudo apt install libwxgtk3.0-gtk3-dev
          
              # -> https://docs.codelite.org/wxWidgets/repo320/#ubuntu-and-debian
              sudo apt-key adv --fetch-keys https://repos.codelite.org/CodeLite.asc 
              sudo apt-add-repository 'deb https://repos.codelite.org/wx3.2.0/ubuntu/ jammy universe'
              sudo apt-get install libwxbase3.2-0-unofficial libwxbase3.2unofficial-dev libwxgtk3.2-0-unofficial libwxgtk3.2unofficial-dev wx3.2-headers wx-common libwxgtk-media3.2-0-unofficial libwxgtk-media3.2unofficial-dev libwxgtk-webview3.2-0-unofficial libwxgtk-webview3.2unofficial-dev libwxgtk-webview3.2-0-unofficial-dbg libwxbase3.2-0-unofficial-dbg libwxgtk3.2-0-unofficial-dbg libwxgtk-media3.2-0-unofficial-dbg wx3.2-i18n wx3.2-examples
              sudo apt-get install libnotify-dev
            fi
          fi

      - name: Configure
        shell: bash
        run: |
          mkdir build
          mkdir install

          # on Windows and macOS, we use vcpkg to pull in our dependencies, and we need to direct
          #  CMake to the toolchain-file (-> https://vcpkg.io/en/docs/users/buildsystems/cmake-integration.html)
          if [ "$RUNNER_OS" == "Windows" ] || [ "$RUNNER_OS" == "macOS" ]; then
            ls ${{ matrix.vcpkg_dir }}/scripts/buildsystems/
            echo ${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake
            cmake \
              -B ./build \
              -G "${{ matrix.generator }}" ${{ matrix.arch }} \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
              .
          else
            # ...whereas on Linux, we use an apt-package, so we don't want to point to the vcpkg-toolchain-file
            if [ "$RUNNER_OS" == "Linux" ]; then
               cmake \
              -B ./build \
              -G "${{ matrix.generator }}" \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              .
            fi

            echo "$RUNNER_OS"

          fi

      - name: Compile
        shell: bash
        run: |
          cmake --build ./build --config MinSizeRel

      #- name: Tests
      #  shell: bash
      #  run: cd build && ctest -C MinSizeRel --verbose

      #- name: List runtime dependencies
      #  shell: bash
      #  run: |
      #    if [ "$RUNNER_OS" == "Linux" ]; then
      #      ldd ./install/bin/example
      #    elif [ "$RUNNER_OS" == "macOS" ]; then
      #      otool -L ./install/bin/example
      #    fi

      # gather the binaries and put them into a zip-file
      - name: Package
        id: create_artifact
        shell: bash
        run: |
          mkdir release
          if [ "$RUNNER_OS" == "Windows" ]; then
            ls ./build/wxWidgetsTest/MinSizeRel/
            7z a -r wxWidgetsTest.zip ./build/wxWidgetsTest/MinSizeRel/*.exe ./build/wxWidgetsTest/MinSizeRel/*.dll
          else
            cd ./build/wxWidgetsTest/
            zip -r ./../../wxWidgetsTest.zip wxWidgetsTest
            cd ../..
          fi
          name=wxWidgetsTest-${{ matrix.suffix }}-$(git describe --always).zip
          mv -v ./wxWidgetsTest.zip release/${name}
          echo "name=${name}" >> $GITHUB_OUTPUT
          echo "path=release/${name}" >> $GITHUB_OUTPUT

      # upload the build-results to artifacts-store
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Release
          path: release

      # If the version we are building here has a tag, and this tag is starting with "v", then we want to upload it as
      #  a "release" to the Github-repo. Here we put together a changelog (from the commit-messages).
      - name: Create Changelog
        id: create_changelog
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          last_tag=$(git describe --tags --abbrev=0 @^ || true)
          if [ -z "$last_tag" ]; then
            git log --oneline --format="%C(auto) %h %s" > changelog.txt
          else
            git log --oneline --format="%C(auto) %h %s" ${last_tag}..@ > changelog.txt
          fi
          cat changelog.txt

      # ...and, now we put it on the Github-website
      - name: Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          artifacts: ${{ steps.create_artifact.outputs.path }}
          allowUpdates: true
          artifactContentType: application/zip
          bodyFile: changelog.txt
          draft: false 
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: false
          token: ${{ secrets.ACCOUNT_PAT }}